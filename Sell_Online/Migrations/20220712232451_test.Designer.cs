// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sell_Online.Data;

namespace Sell_Online.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220712232451_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Sell_Online.Models.Chat", b =>
                {
                    b.Property<string>("ChatID")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("text");

                    b.Property<string>("RecieverUserID")
                        .HasColumnType("text");

                    b.Property<string>("SenderID")
                        .HasColumnType("text");

                    b.HasKey("ChatID");

                    b.HasIndex("RecieverUserID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Sell_Online.Models.Message", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ChatID")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<bool?>("Seen")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("ChatID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Sell_Online.Models.Notification", b =>
                {
                    b.Property<string>("NotificationID")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Sell_Online.Models.PhoneNumbers", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Sell_Online.Models.Post", b =>
                {
                    b.Property<string>("PostID")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2022, 7, 13, 1, 24, 51, 95, DateTimeKind.Local).AddTicks(2505));

                    b.Property<DateTime?>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2022, 7, 13, 1, 24, 51, 95, DateTimeKind.Local).AddTicks(9510));

                    b.Property<bool?>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<long?>("PostCategoryID")
                        .HasColumnType("bigint");

                    b.Property<short?>("PostStatesStateID")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SoldDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2022, 7, 13, 1, 24, 51, 95, DateTimeKind.Local).AddTicks(9625));

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("PostID");

                    b.HasIndex("PostCategoryID");

                    b.HasIndex("PostStatesStateID");

                    b.HasIndex("UserID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Sell_Online.Models.PostCategory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Sell_Online.Models.PostImages", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<string>("PostID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PostID");

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("Sell_Online.Models.PostStates", b =>
                {
                    b.Property<short?>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("StateTitle")
                        .HasColumnType("text");

                    b.HasKey("StateID");

                    b.ToTable("PostStates");
                });

            modelBuilder.Entity("Sell_Online.Models.PostViews", b =>
                {
                    b.Property<int>("PostViewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PostID")
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("ViewerID")
                        .HasColumnType("text");

                    b.HasKey("PostViewID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("PostViews");
                });

            modelBuilder.Entity("Sell_Online.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImageExtension")
                        .HasColumnType("text");

                    b.Property<bool?>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sell_Online.Models.Chat", b =>
                {
                    b.HasOne("Sell_Online.Models.User", "Reciever")
                        .WithMany()
                        .HasForeignKey("RecieverUserID");

                    b.HasOne("Sell_Online.Models.User", "Sender")
                        .WithMany("Chats")
                        .HasForeignKey("SenderID");
                });

            modelBuilder.Entity("Sell_Online.Models.Message", b =>
                {
                    b.HasOne("Sell_Online.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatID");
                });

            modelBuilder.Entity("Sell_Online.Models.Notification", b =>
                {
                    b.HasOne("Sell_Online.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Sell_Online.Models.PhoneNumbers", b =>
                {
                    b.HasOne("Sell_Online.Models.User", "User")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Sell_Online.Models.Post", b =>
                {
                    b.HasOne("Sell_Online.Models.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryID");

                    b.HasOne("Sell_Online.Models.PostStates", "PostStates")
                        .WithMany()
                        .HasForeignKey("PostStatesStateID");

                    b.HasOne("Sell_Online.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Sell_Online.Models.PostImages", b =>
                {
                    b.HasOne("Sell_Online.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostID");
                });

            modelBuilder.Entity("Sell_Online.Models.PostViews", b =>
                {
                    b.HasOne("Sell_Online.Models.Post", "Post")
                        .WithMany("PostViews")
                        .HasForeignKey("PostID");

                    b.HasOne("Sell_Online.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
